{"version":3,"sources":["../../src/dataStructures/stack.ts"],"sourcesContent":["/**\n * A generic Stack class that can store elements of any type.\n */\nexport class Stack<T> {\n  private count: number;\n  private items: { [key: string]: T };\n\n  /**\n    * Constructs a new Stack instance.\n    */\n  constructor() {\n    this.count = 0;\n    this.items = {};\n  }\n\n  /**\n    * Pushes an element onto the stack.\n    * @param element - The element to push onto the stack.\n    */\n  push(element: T): void {\n    this.items[this.count] = element;\n    this.count += 1;\n  }\n\n  /**\n    * Adds an element to the stack. This is an alias for push.\n    * @param element - The element to add to the stack.\n    */\n  add(element: T): void {\n    this.push(element);\n  }\n\n  /**\n    * Pops an element from the stack.\n    * @returns The popped element, or undefined if the stack is empty.\n    */\n  pop(): T | undefined {\n    if (this.isEmpty()) return undefined;\n    this.count -= 1;\n    const result = this.items[this.count];\n    delete this.items[this.count];\n    return result;\n  }\n\n  /**\n    * Removes an element from the stack. This is an alias for pop.\n    * @returns The removed element, or undefined if the stack is empty.\n    */\n  remove(): T | undefined {\n    return this.pop();\n  }\n\n  /**\n    * Peeks at the top element of the stack without removing it.\n    * @returns The top element, or undefined if the stack is empty.\n    */\n  peek(): T | undefined {\n    if (this.isEmpty()) return undefined;\n    return this.items[this.count - 1];\n  }\n\n  /**\n    * Scry at the top element of the stack without removing it. This is an alias for peek.\n    * @returns The top element, or undefined if the stack is empty.\n    */\n  scry(): T | undefined {\n    return this.peek();\n  }\n\n  /**\n    * Checks if the stack is empty.\n    * @returns True if the stack is empty, false otherwise.\n    */\n  isEmpty(): boolean {\n    return this.count === 0;\n  }\n\n  /**\n    * Gets the size of the stack.\n    * @returns The size of the stack.\n    */\n  size(): number {\n    return this.count;\n  }\n\n  /**\n    * Gets the length of the stack. This is an alias for size.\n    * @returns The length of the stack.\n    */\n  length(): number {\n    return this.size();\n  }\n\n  /**\n    * Clears the stack.\n    */\n  clear(): void {\n    this.items = {};\n    this.count = 0;\n  }\n\n  /**\n    * Converts the stack to an array.\n    * @returns An array representation of the stack.\n    */\n  toArray(): [number, T][] {\n    const itemStore: { [p: string]: T } = this.items;\n    return Object.keys(this.items).map((key: string): [number, T] => [Number(key), itemStore[key]]);\n  }\n\n  /**\n    * Converts the stack to a string.\n    * @returns A string representation of the stack.\n    */\n  toString(): string {\n    if (this.isEmpty()) return '';\n    let objString = `${this.items[0]}`;\n    for (let i = 1; i < this.count; i++) {\n      objString = `${objString},${this.items[i]}`;\n    }\n    return objString;\n  }\n}\n"],"names":["Stack","count","items","constructor","push","element","add","pop","isEmpty","undefined","result","remove","peek","scry","size","length","clear","toArray","itemStore","Object","keys","map","key","Number","toString","objString","i"],"rangeMappings":"","mappings":"AAGA,OAAO,MAAMA,MACX,AAAQC,KAAc,AACtB,CAAQC,KAA4B,AAKpCC,cAAc,CACZ,IAAI,CAACF,KAAK,CAAG,CACb,CAAA,IAAI,CAACC,KAAK,CAAG,CAAC,CAChB,CAMAE,KAAKC,OAAU,CAAQ,CACrB,IAAI,CAACH,KAAK,CAAC,IAAI,CAACD,KAAK,CAAC,CAAGI,OACzB,CAAA,IAAI,CAACJ,KAAK,EAAI,CAChB,CAMAK,IAAID,OAAU,CAAQ,CACpB,IAAI,CAACD,IAAI,CAACC,QACZ,CAMAE,KAAqB,CACnB,GAAI,IAAI,CAACC,OAAO,GAAI,OAAOC,SAC3B,CAAA,IAAI,CAACR,KAAK,EAAI,EACd,MAAMS,OAAS,IAAI,CAACR,KAAK,CAAC,IAAI,CAACD,KAAK,CAAC,AACrC,QAAO,IAAI,CAACC,KAAK,CAAC,IAAI,CAACD,KAAK,CAAC,CAC7B,OAAOS,MACT,CAMAC,QAAwB,CACtB,OAAO,IAAI,CAACJ,GAAG,EACjB,CAMAK,MAAsB,CACpB,GAAI,IAAI,CAACJ,OAAO,GAAI,OAAOC,UAC3B,OAAO,IAAI,CAACP,KAAK,CAAC,IAAI,CAACD,KAAK,CAAG,EAAE,AACnC,CAMAY,MAAsB,CACpB,OAAO,IAAI,CAACD,IAAI,EAClB,CAMAJ,SAAmB,CACjB,OAAO,IAAI,CAACP,KAAK,GAAK,CACxB,CAMAa,MAAe,CACb,OAAO,IAAI,CAACb,KAAK,AACnB,CAMAc,QAAiB,CACf,OAAO,IAAI,CAACD,IAAI,EAClB,CAKAE,OAAc,CACZ,IAAI,CAACd,KAAK,CAAG,CAAC,CACd,CAAA,IAAI,CAACD,KAAK,CAAG,CACf,CAMAgB,SAAyB,CACvB,MAAMC,UAAgC,IAAI,CAAChB,KAAK,CAChD,OAAOiB,OAAOC,IAAI,CAAC,IAAI,CAAClB,KAAK,EAAEmB,GAAG,CAAC,AAACC,KAA6B,CAACC,OAAOD,KAAMJ,SAAS,CAACI,IAAI,CAAC,CAChG,CAMAE,UAAmB,CACjB,GAAI,IAAI,CAAChB,OAAO,GAAI,MAAO,GAC3B,IAAIiB,UAAY,CAAC,EAAE,IAAI,CAACvB,KAAK,CAAC,EAAE,CAAC,CAAC,CAClC,IAAK,IAAIwB,EAAI,EAAGA,EAAI,IAAI,CAACzB,KAAK,CAAEyB,IAAK,CACnCD,UAAY,CAAC,EAAEA,UAAU,CAAC,EAAE,IAAI,CAACvB,KAAK,CAACwB,EAAE,CAAC,CAAC,AAC7C,CACA,OAAOD,SACT,CACF"}