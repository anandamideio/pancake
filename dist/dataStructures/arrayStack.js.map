{"version":3,"sources":["../../src/dataStructures/arrayStack.ts"],"sourcesContent":["/**\n * A generic stack class that can store elements of any type.\n */\nexport class ArrayStack<T> {\n  private items: T[];\n\n  /**\n    * Constructs a new ArrayStack instance.\n    */\n  constructor() {\n    this.items = [];\n  }\n\n  /**\n    * Pushes an element onto the top of the stack.\n    * @param element - The element to push onto the stack.\n    */\n  push(element: T): void {\n    this.items.push(element);\n  }\n\n  add(element: T): void {\n    this.items.push(element);\n  }\n\n  /**\n    * Pops an element off the top of the stack.\n    * @returns The popped element, or undefined if the stack is empty.\n    */\n  pop(): T | undefined {\n    return this.items.pop();\n  }\n\n  remove(): T | undefined {\n    return this.items.pop();\n  }\n\n  /**\n    * Peeks at the top element of the stack without removing it.\n    * @returns The top element, or undefined if the stack is empty.\n    */\n  peek(): T | undefined {\n    return this.items[this.items.length - 1];\n  }\n\n  scry(): T | undefined {\n    return this.items[this.items.length - 1];\n  }\n\n  /**\n    * Checks if the stack is empty.\n    * @returns True if the stack is empty, false otherwise.\n    */\n  isEmpty(): boolean {\n    return this.items.length === 0;\n  }\n\n  /**\n    * Gets the size of the stack.\n    * @returns The size of the stack.\n    */\n  size(): number {\n    return this.items.length;\n  }\n\n  /**\n    * Clears the stack.\n    */\n  clear(): void {\n    this.items = [];\n  }\n\n  /**\n    * Converts the stack to an array.\n    * @returns An array representation of the stack.\n    */\n  toArray(): T[] {\n    return [...this.items]; // Return a copy to avoid mutation\n  }\n\n  /**\n    * Converts the stack to a string.\n    * @returns A string representation of the stack.\n    */\n  toString(): string {\n    return this.items.toString();\n  }\n}\n"],"names":["ArrayStack","items","constructor","push","element","add","pop","remove","peek","length","scry","isEmpty","size","clear","toArray","toString"],"rangeMappings":"","mappings":"AAGA,OAAO,MAAMA,WACX,AAAQC,KAAW,AAKnBC,cAAc,CACZ,IAAI,CAACD,KAAK,CAAG,EAAE,AACjB,CAMAE,KAAKC,OAAU,CAAQ,CACrB,IAAI,CAACH,KAAK,CAACE,IAAI,CAACC,QAClB,CAEAC,IAAID,OAAU,CAAQ,CACpB,IAAI,CAACH,KAAK,CAACE,IAAI,CAACC,QAClB,CAMAE,KAAqB,CACnB,OAAO,IAAI,CAACL,KAAK,CAACK,GAAG,EACvB,CAEAC,QAAwB,CACtB,OAAO,IAAI,CAACN,KAAK,CAACK,GAAG,EACvB,CAMAE,MAAsB,CACpB,OAAO,IAAI,CAACP,KAAK,CAAC,IAAI,CAACA,KAAK,CAACQ,MAAM,CAAG,EAAE,AAC1C,CAEAC,MAAsB,CACpB,OAAO,IAAI,CAACT,KAAK,CAAC,IAAI,CAACA,KAAK,CAACQ,MAAM,CAAG,EAAE,AAC1C,CAMAE,SAAmB,CACjB,OAAO,IAAI,CAACV,KAAK,CAACQ,MAAM,GAAK,CAC/B,CAMAG,MAAe,CACb,OAAO,IAAI,CAACX,KAAK,CAACQ,MAAM,AAC1B,CAKAI,OAAc,CACZ,IAAI,CAACZ,KAAK,CAAG,EAAE,AACjB,CAMAa,SAAe,CACb,MAAO,IAAI,IAAI,CAACb,KAAK,CAAC,AACxB,CAMAc,UAAmB,CACjB,OAAO,IAAI,CAACd,KAAK,CAACc,QAAQ,EAC5B,CACF"}